
name: Detect Flaky Tests

on:
  workflow_dispatch: 

jobs:
  flaky-tests:
    uses: ashleytoole84/flaky-test-detector/.github/workflows/flaky-test-detector.yml@v1.0.0
    with:
      repository: ashleytoole84/platform-engineer-tech-case-49378219
      workflow-name: CI
      runs-limit: 30
      branch: main
    secrets:
      github-token: ${{ secrets.FLAKY_TEST_PAT }}

  report-results:
    needs: flaky-tests
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Debug Outputs
        run: |
          echo "Raw ALL_TESTS: ${{ needs.flaky-tests.outputs.all-tests }}"
          echo "Raw FLAKY_TESTS: ${{ needs.flaky-tests.outputs.flaky-tests }}"
      - name: Display test results
        run: |

          ALL_TESTS_RAW=$(echo "${{ needs.flaky-tests.outputs.all-tests }}" | tr -d '\n' | tr -d '\r')
          FLAKY_TESTS_RAW=$(echo "${{ needs.flaky-tests.outputs.flaky-tests }}" | tr -d '\n' | tr -d '\r')
          python - <<EOF
          import json
          import re

          all_tests_raw = "$ALL_TESTS_RAW"
          flaky_tests_raw = "$FLAKY_TESTS_RAW"

          def clean_json(raw):
              if not raw or raw == "{}":
                  return {}
              try:

                  cleaned = re.sub(r'([^"\s{]+):', r'"\1":', raw)
                  print(f"Cleaned ALL_TESTS: {cleaned}") 
                  return json.loads(cleaned)
              except json.JSONDecodeError as e:
                  print(f"JSONDecodeError in clean_json: {e} for raw: {raw}")
                  return {}

          all_tests = clean_json(all_tests_raw)
          flaky_tests = clean_json(flaky_tests_raw)

          print("All Test Results:")
          if all_tests and all_tests != {}:
              for test, counts in all_tests.items():
                  print(f"- {test}: {counts['pass']} passes, {counts['fail']} failures")
          else:
              print("No test results found.")

          print("")
          print("Flaky Test Results:")
          if flaky_tests and flaky_tests != {}:
              for test, fail_count in flaky_tests.items():
                  print(f"- {test}: failed {fail_count} times")
          else:
              print("No flaky tests detected.")

          print("Check 'Fetch and parse test artifacts' step logs for additional details.")
          EOF