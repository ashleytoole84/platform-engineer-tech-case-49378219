name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  checks: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: checkout code
        uses: actions/checkout@v4
        
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          check-latest: true

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: verify mvn environment
        run: mvn --version

      - name: Build with Maven
        run: mvn clean package --batch-mode --errors --fail-at-end -DskipTests
        continue-on-error: false

      - name: Run tests
        run: mvn test --batch-mode --errors --fail-at-end
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            **/target/surefire-reports/
          retention-days: 7
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/target/*.jar
          retention-days: 7

      - name: Configure Git for release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
  
      - name: Prepare Maven release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn release:clean release:prepare \
            -B \
            -DautoVersionSubmodules=true \
            -DpushChanges=true \
            -DskipTests

      - name: Extract Maven release version for Docker
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          TAG=$(git describe --tags --abbrev=0)
          VERSION=${TAG#v} # Remove 'v' prefix (e.g., v1.0.0 -> 1.0.0)
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Log in to GHCR
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:${{ env.RELEASE_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Configure Maven settings for GitHub Packages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml << EOF
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GITHUB_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: Perform Maven release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mvn release:perform -B -DskipTests

      - name: Notify on failure
        if: failure()
        run: |
          echo "Build, tests, Docker push, or release failed. Check logs for details."